import "graphene.lt"
import "graphene_nh2.lt"

# This example is complicated because I am using the "new random()" command
# to randomly select different kinds of unit cells to build my graphene surface
# that makes up the wall of the carbon nanotube.  Some of the unit cells
# are covalently bound to "NH2" (amine) groups.  For a simpler example of
# a nanotube containing only carbon atoms, see the "nanotube_simple.lt" file.

# The "Graphene" unit cell defined in "graphene.lt" lies in the XY plane.
# In the next line, we will create a new version of the graphene unit cell
# which lies in the XZ plane, by rotating Graphene 90 degrees around the X axis:

Graphene_XZ = Graphene.rot(90,1,0,0)

# We also do this for the "Graphene_NH2" version of the graphene unit cell.
# (In that version, one of the carbon atoms is bound to an NH2 (amine) group.)

Graphene_NH2_XZ = Graphene_NH2.rot(90,1,0,0)


# --------- A nanotube is a 2D array of graphene unit cells ---------

# Now use this to build a simple ("zigzag") nanotube where the long-axis of each
# hexagon is aligned with the tube axis (along the Z direction).  If the 
# cicumference of a "zigzag" nanotube contains N hexagons, then the radius of 
# the tube, R=(W/4)/tan((2*pi)/(4*N)), where W=2*d*sqrt(3)/2, and d = the carbon
# bond length.  If N=14 and d=1.42 Ansgroms then R=5.457193512764 Angstroms
# In the Joly 2011 paper, the tube radii varied between 5.14 and 18.7 Angstroms.

# Then I create a 14 x 12 2-Dimensional sheet of graphene unit cells
# which are wrapped around a tube.
# I use the "new random" command to choose between the "Graphene_XZ" and
# "Graphene_NH2_XZ" versions of the unit cell randomly when I fill this array.

#
# Suggested reading: Please read the sections in the moltemplate manual
# that explain the "new random" command, as well as multidimensional arrays.
#

Nanotube {

  # Since there are no bonds holding the nanotube together, we will be using
  # "fix rigid/nve molecule" to keep each nanotube rigid.  In order to do this
  # we must assign the same molecule-ID counter ($mol) to all of the atoms in
  # this nanotube.  To do that, we use the "create_var {$mol}" command.

  create_var { $mol }

  # Now create a 2-D array of Graphene unit cells, bent in a cylindrical shape:
  # We use the "new random" command to randomly choose between two different
  # versions of the Graphene unit cell (one with and one without the NH2 group).

  nanotube=new random([Graphene_XZ.move(0,-5.4571935,0),     # radius=5.4571935
                       Graphene_NH2_XZ.move(0,-5.4571935,0)],
                      [143,   # 143 copies of Graphene_XZ
                       25],   # 25 copies of Graphene_NH2_XZ (Note:143+25=14*12)
                      12345)  # <-- random seed
               [14].rot(25.7142857,0,0,1)                    #25.7=360/14
               [12].rot(12.8571429,0,0,1).move(0, 0, 2.13)   #12.9=180/14
                                                             #2.13= d*1.5

               # Note: The length is 12 hexagons, the circumference is
               # 14 hexagons (~=25.56 and 34.43 Angstroms, respectively).
  # Optional:
  # Center the carbon nanotube at the origin.  (Note: 11.715 = ((12-1)/2)*2.13)

  nanotube[*][*].move(0, 0, -11.715)
}




# ---------- BUILDING CHIRAL NANOTUBES USING EXTERNAL SOFTWARE -------------
# 
# The approach shown here works well for "zig-zag" nanotubes.
# Nanotubes with other chiralities are more difficult to make this way
# (because the tube axis is no longer perpendicular to graphene basis vectors).
# For those nanotubes, I recommend using an external program to generate
# a LAMMPS data file for the nanotube.  If you want to combine the tube
# with other molecules created by moltemplate, you can then import it into 
# moltemplate as a molecule object using the "ltemplify.py" utility.  Details:
# 
#  ---   VMD plugins (by Axel Kohlmeyer and Robert R. Johnson) ---
# 
# The nanotube-builder for VMD can generate nanotubes (with smooth tips)
# for any chirality.  These tubes also have explicit bonds between carbons:
# http://www.ks.uiuc.edu/Research/vmd/plugins/nanotube/
# 
# The resulting nanotube can be converted to a data file using topotools:
# https://sites.google.com/site/akohlmey/software/topotools
# To do that, select the "Extensions"->"Tk Console" menu and enter
# 
# topo writelammpsdata nanotube.data full
# 
#  --- ltemplify.py ---
# 
# That data file can be converted to moltemplate format (an .LT file) 
# using the "ltemplify.py" utility.
# 
# The first step is to create a short input script containing the atom_style
# command (ltemplify.py will read this script. Presumably atom_style is "full").
# 
# echo "atom_style full" > nanotube.in
# 
# Then run ltemplify to convert nanotube.data into a moltemplate file:
# ltemplify.py -name Nanotube nanotube.in nanotube.data > nanotube.lt
# 
# You will need to edit the "nanotube.lt" file to replace all of the 
# "@atom:type1" atoms types file to match the carbon atom types in the other lt
# files (ie "@atom:../C").  If you don't plan on defining bonded interactions
# between carbon atoms, then be sure to remove the write("Data Bonds") section
# of the "nanotube.lt" file (if it is present).
# 
# Finally make sure the "system.lt" contains these lines:
#
# import "nanotube.lt"
# nanotube = new Nanotube.move(?,?,?)
#
# (Replace ?,?,? with the location where you want the nanotube to go.
#  You can also rotate it using .rot(angle,axisx,axisy,axiz).)
# 
# ... and then run moltemplate the normal way
# 
# Let me know if you run into trouble with this approach, 
# and I will make note of that in this file.
# 
#  --- links ---
# Note: there are numerous programs for specifying the coordinates 
# of the atoms in a nanotube, some of which are below.
# http://www.nanotube.msu.edu/tubeASP/
# http://turin.nss.udel.edu/research/tubegenonline.html
# http://www.ugr.es/~gmdm/java/contub/contub.html
# (You can load coordinates into moltemplate using the "-xyz" or "-pdb"
#  arguments. However currently (2013-12-01), the file must contain coordinates
#  for all of the atoms in your sytem, not just the nanotube.)
# -------------------------------------------------------------------------
